#!/usr/bin/perl

use strict;
use warnings;
use Dancer::Template::Simple;
use File::Basename 'basename', 'dirname';
use File::Path 'mkpath';
use File::Spec::Functions;
use Getopt::Long;
use Pod::Usage;
use Dancer::Renderer;
use LWP::UserAgent;
use constant FILE => 1;

# options
my $help = 0;
my $do_check_dancer_version = 1;
my $name = undef;
my $path = '.';
my $store = 'ElasticSearch';
my $template = 'tt';

sub templates($);
sub app_tree($);
sub create_node($;$);

GetOptions(
    "h|help"          => \$help,
    "a|application=s" => \$name,
    "s|store=s"       => \$store,
    "t|template=s"    => \$template,
    "p|path=s"        => \$path,
    "x|no-check"      => sub { $do_check_dancer_version = 0 },
    "v|version"       => \&version,
) or pod2usage( -verbose => 1 );

# main
my $PERL_INTERPRETER = -r '/usr/bin/env' ? '#!/usr/bin/env perl' : "#!$^X";

pod2usage( -verbose => 1 ) if $help;
pod2usage( -verbose => 1 ) if not defined $name;
pod2usage( -verbose => 1 ) unless -d $path && -w $path;
sub version {require Dancer; print 'Dancer ' . $Dancer::VERSION . "\n"; exit 0;}

validate_app_name($name);
validate_catmandu_store();
validate_template_engine();

my $DO_OVERWRITE_ALL = 0;
my $DANCER_APP_DIR   = get_application_path($path, $name);
my $DANCER_SCRIPT    = get_script_path($name);
my ($LIB_FILE, $LIB_PATH) = get_lib_path($name);

my $AUTO_RELOAD = eval "require Module::Refresh and require Clone" ? 1 : 0;

require Dancer;
my $DANCER_VERSION   = $Dancer::VERSION;

version_check() if $do_check_dancer_version;
safe_mkdir($DANCER_APP_DIR);
create_node( app_tree($name), $DANCER_APP_DIR );

unless (eval "require YAML") {
    print <<NOYAML;
*****
WARNING: YAML.pm is not installed.  This is not a full dependency, but is highly
recommended; in particular, the scaffolded Dancer app being created will not be
able to read settings from the config file without YAML.pm being installed.

To resolve this, simply install YAML from CPAN, for instance using one of the
following commands:

  cpan YAML
  perl -MCPAN -e 'install YAML'
  curl -L http://cpanmin.us | perl - --sudo YAML
*****
NOYAML
}

unless (eval "require Catmandu") {
    print <<NOCATMANDU;
*****
WARNING: Catmandu.pm is not installed.

To resolve this, simply install Catmandu from CPANM:

  cpanm Catmandu
*****
NOCATMANDU
}

sub validate_app_name {
    my $name = shift;
    if ($name =~ /[^\w:]/ || $name =~ /^\d/ || $name =~ /\b:\b|:{3,}/) {
        print STDERR "Error: Invalid application name.\n";
        print STDERR "Application names must not contain single colons,"
            ." dots, hyphens or start with a number.\n";
        exit;
    }
}

sub validate_catmandu_store {
    my %STORES = (
        dbi => 'DBI',
        elasticsearch => 'ElasticSearch',
	mongodb => 'MongoDB',
        hash => 'Hash',
        solr => 'Solr',
    );

    if (exists $STORES{lc $store}) {
      $store = $STORES{lc $store};
      return;
    } else {
      print STDERR "Error: Invalid store name.\n Options are [dbi|elasticsearch|mongodb|hash|solr].\n";
      exit;
    }
}

sub validate_template_engine {
    my %ENGINES = (
        tt => 'template_toolkit',
        simple => 'simple'
    );

    if (exists $ENGINES{lc $template}) {
      $template = $ENGINES{lc $template};
      return;
    } else {
      print STDERR "Error: Invalid template engine name.\n Options are [tt|simple].\n";
      exit;
    }
}

sub get_application_path {
    my ($path, $app_name) = @_;
    catdir($path, _dash_name($app_name));
}

sub get_lib_path {
    my $name = shift;
    my @lib_path = split('::', $name);
    my ($lib_file, $lib_path) = (pop @lib_path) . ".pm";
    $lib_path = join('/', @lib_path);
    $lib_path .= '/' if length $lib_path;
    return ($lib_file, $lib_path);
}

sub get_script_path {
    _dash_name(shift);
}

sub _dash_name {
    my $name = shift;
    $name =~ s/\:\:/-/g;
    $name;
}

sub create_node($;$) {
    my ($node, $root) = @_;
    $root ||= '.';

    my $manifest_name = catfile($root => 'MANIFEST');
    open my $manifest, ">", $manifest_name or die $!;

    # create a closure, so we do not need to get $root passed as
    # argument on _create_node
    my $add_to_manifest = sub {
        my $file = shift;
        $file =~ s{^$root/?}{};
        print $manifest "$file\n";
    };

    $add_to_manifest->($manifest_name);
    _create_node($add_to_manifest, $node, $root);
    close $manifest;
}

sub _create_node {
    my ($add_to_manifest, $node, $root) = @_;

    my $templates = templates($name);

    while ( my ($path, $content) = each %$node ) {
        $path = catfile($root, $path);

        if (ref($content) eq 'HASH') {
            safe_mkdir($path);
            _create_node($add_to_manifest, $content, $path);
        } elsif (ref($content) eq 'CODE') {
            # The content is a coderef, which, given the path to the file it
            # should create, will do the appropriate thing:
            $content->($path);
            $add_to_manifest->($path);
       } else {
            my $file = basename($path);
            my $dir  = dirname($path);
            my $ex = ($file =~ s/^\+//); # look for '+' flag (executable)
            my $template = $templates->{$file};

            $path = catfile($dir, $file); # rebuild the path without the '+' flag
            write_file($path, $template, {appdir => File::Spec->rel2abs($DANCER_APP_DIR)});
            chmod 0755, $path if $ex;
            $add_to_manifest->($path);
        }
    }
}

sub app_tree($) {
    my ($appname) = @_;

    return {
        "Makefile.PL"        => FILE,
        "MANIFEST.SKIP"      => FILE,
        lib                  => {
            $LIB_PATH => {
                $LIB_FILE => FILE,
            }
        },
        "bin" => {
            "+app.pl" => FILE,
        },
        "config.yml" => FILE,
        "catmandu.yml" => FILE,
        "environments" => {
            "development.yml" => FILE,
            "production.yml" => FILE,
        },
        "views" => {
            "layouts" => {
                "main.tt" => FILE,
            },
            "index.tt" => FILE,
        },
        "public" => {
            "+dispatch.cgi"  => FILE,
            "+dispatch.fcgi" => FILE,
            "css" => {
                "main.css" => FILE,
            },
            "img" => {},
            "js" => {
                "main.js" => FILE,
            },
        },
        "t" => {
            "001_base.t"        => FILE,
            "002_index_route.t" => FILE,
        },
    };
}

sub safe_mkdir {
    my ($dir) = @_;
    if (not -d $dir) {
        print "+ $dir\n";
        mkpath $dir or die "could not mkpath $dir: $!";
    }
    else {
        print "  $dir\n";
    }
}

sub write_file {
    my ($path, $template, $vars) = @_;
    die "no template found for $path" unless defined $template;

    $vars->{dancer_version} = $DANCER_VERSION;

    # if file already exists, ask for confirmation
    if (-f $path && (not $DO_OVERWRITE_ALL)) {
        print "! $path exists, overwrite? [N/y/a]: ";
        my $res = <STDIN>; chomp($res);
        $DO_OVERWRITE_ALL = 1 if $res eq 'a';
        return 0 unless ($res eq 'y') or ($res eq 'a');
    }

    my $fh;
    my $content = process_template($template, $vars);
    print "+ $path\n";
    open $fh, '>', $path or die "unable to open file `$path' for writing: $!";
    print $fh $content;
    close $fh;
}

sub process_template {
    my ($template, $tokens) = @_;
    my $engine = Dancer::Template::Simple->new;
    $engine->{start_tag} = '<%';
    $engine->{stop_tag} = '%>';
    return $engine->render(\$template, $tokens);
}

sub write_data_to_file {
    my ($data, $path) = @_;
    open(my $fh, '>', $path)
      or warn "Failed to write file to $path - $!" and return;
    binmode($fh);
    print {$fh} unpack 'u*', $data;
    close $fh;
}

sub send_http_request {
    my $url = shift;
    my $ua = LWP::UserAgent->new;
    $ua->timeout(5);
    $ua->env_proxy();

    my $response = $ua->get($url);

    if ($response->is_success) {
        return $response->content;
    }
    else {
        return;
    }
}

sub version_check {
    my $latest_version = 0;
    require Dancer;

    my $resp = send_http_request('http://search.cpan.org/api/module/Dancer');

    if ($resp) {
        if ( $resp =~ /"version" (?:\s+)? \: (?:\s+)? "(\d\.\d+)"/x ) {
            $latest_version = $1;
        } else {
            die "Can't understand search.cpan.org's reply.\n";
        }
    }

    return if $DANCER_VERSION =~  m/_/;

    if ($latest_version > $DANCER_VERSION) {
        print qq|
The latest stable Dancer release is $latest_version, you are currently using $DANCER_VERSION.
Please check http://search.cpan.org/dist/Dancer/ for updates.

|;
    }
}

sub download_file {
    my ($path, $url) = @_;
    my $resp = send_http_request($url);
    if ($resp) {
        open my $fh, '>', $path or die "cannot open $path for writing: $!";
        print $fh $resp;
        close $fh
    }
    return 1;
}

sub templates($) {
    my $appname    = shift;
    my $appfile    = $appname;
    my $cleanfiles = $appname;

    $appfile    =~ s{::}{/}g;
    $cleanfiles =~ s{::}{-}g;

    return {

'Makefile.PL' =>
"use strict;
use warnings;
use ExtUtils::MakeMaker;

WriteMakefile(
    NAME                => '$appname',
    AUTHOR              => q{YOUR NAME <youremail\@example.com>},
    VERSION_FROM        => 'lib/$appfile.pm',
    ABSTRACT            => 'YOUR APPLICATION ABSTRACT',
    (\$ExtUtils::MakeMaker::VERSION >= 6.3002
      ? ('LICENSE'=> 'perl')
      : ()),
    PL_FILES            => {},
    PREREQ_PM => {
        'Test::More' => 0,
        'YAML'       => 0,
        'Dancer'     => <% dancer_version %>,
        'Catmandu'   => 0.0401,
    },
    dist                => { COMPRESS => 'gzip -9f', SUFFIX => 'gz', },
    clean               => { FILES => '$cleanfiles-*' },
);
",


'index.tt'  =>
'<h1>Hello from index.tt</h1>
',


'main.tt'   =>
'<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>'.$appname.'</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="">
        <meta name="author" content="">

        <!-- Le styles -->
        <link href="/css/main.css" rel="stylesheet">

        <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
        <!--[if lt IE 9]>
          <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
        <![endif]-->
    </head>

    <body>

        <div class="container">

          [% content %]

        </div> <!-- /container -->

        <!-- Le javascript -->
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script src="/js/main.js"></script>
    </body>
</html>
',


"dispatch.cgi" =>
"$PERL_INTERPRETER
use Dancer ':syntax';
use FindBin '\$RealBin';
use Plack::Runner;

# For some reason Apache SetEnv directives dont propagate
# correctly to the dispatchers, so forcing PSGI and env here
# is safer.
set apphandler => 'PSGI';
set environment => 'production';

my \$psgi = path(\$RealBin, '..', 'bin', 'app.pl');
die \"Unable to read startup script: \$psgi\" unless -r \$psgi;

Plack::Runner->run(\$psgi);
",


"dispatch.fcgi" =>
qq{$PERL_INTERPRETER
use Dancer ':syntax';
use FindBin '\$RealBin';
use Plack::Handler::FCGI;

# For some reason Apache SetEnv directives dont propagate
# correctly to the dispatchers, so forcing PSGI and env here
# is safer.
set apphandler => 'PSGI';
set environment => 'production';

my \$psgi = path(\$RealBin, '..', 'bin', 'app.pl');
my \$app = do(\$psgi);
die "Unable to read startup script: \$@" if \$@;
my \$server = Plack::Handler::FCGI->new(nproc => 5, detach => 1);

\$server->run(\$app);
},


"app.pl" =>
"$PERL_INTERPRETER
use Dancer;
use $appname;
dance;
",


"$LIB_FILE" =>
"package $appname;
use Catmandu;
use Catmandu::Sane;
use Dancer ':syntax';

our \$VERSION = '0.1';

sub store {
  state \$store = Catmandu->store;
}

sub bag {
  state \$bag = &store->bag;
}

get '/' => sub {
    template 'index';
};

true;
",


'main.css' =>
'body {
    font-family: "Lucida Grande";
    font-size: 14px;
}

.container {
    width: 960px;
    margin: 0 auto;
}
',


'main.js' =>
'$(function(){
    // do something.
});
',


'config.yml' =>
"# This is the main configuration file of your Dancer app
# env-related settings should go to environments/\$env.yml
# all the settings in this file will be loaded at Dancer's startup.

# Your application's name
appname: \"$name\"

# The default layout to use for your application (located in
# views/layouts/main.tt)
layout: \"main\"

# when the charset is set to UTF-8 Dancer will handle for you
# all the magic of encoding and decoding. You should not care
# about unicode within your app when this setting is set (recommended).
charset: \"UTF-8\"

# Template Engine
template: \"$template\"
engines:
  $template:
    encoding:  'utf8'
    start_tag: '[%'
    end_tag:   '%]'
",


'catmandu.yml' =>
"store:
  default:
    package: $store

exporter:
  default:
    package: JSON
",


'MANIFEST.SKIP' => manifest_skip(),


'development.yml' =>
"# configuration file for development environment

# the logger engine to use
# console: log messages to STDOUT (your console where you started the
#          application server)
# file:    log message to a file in log/
logger: \"console\"

# the log level for this environment
# core is the lowest, it shows Dancer's core log messages as well as yours
# (debug, info, warning and error)
log: \"core\"

# should Dancer consider warnings as critical errors?
warnings: 1

# should Dancer show a stacktrace when an error is caught?
show_errors: 1

# auto_reload is a development and experimental feature
# you should enable it by yourself if you want it
# Module::Refresh is needed
#
# Be aware it's unstable and may cause a memory leak.
# DO NOT EVER USE THIS FEATURE IN PRODUCTION
# OR TINY KITTENS SHALL DIE WITH LOTS OF SUFFERING
auto_reload: 0
",


'production.yml' =>
'# configuration file for production environment

# only log warning and error messsages
log: "warning"

# log message to a file in logs/
logger: "file"

# don\'t consider warnings critical
warnings: 0

# hide errors
show_errors: 0

# cache route resolution for maximum performance
route_cache: 1

',


"001_base.t" =>
"use Test::More tests => 1;
use strict;
use warnings;

use_ok '$appname';
",


"002_index_route.t" =>
"use Test::More tests => 2;
use strict;
use warnings;

# the order is important
use $appname;
use Dancer::Test;

route_exists [GET => '/'], 'a route handler is defined for /';
response_status_is ['GET' => '/'], 200, 'response status is 200 for /';
",

    };
}

sub manifest_skip {
    return <<'EOF';
^\.git\/
maint
^tags$
.last_cover_stats
Makefile$
^blib
^pm_to_blib
^.*.bak
^.*.old
^t.*sessions
^cover_db
^.*\.log
^.*\.swp$
EOF
}


__END__
=pod

=head1 NAME

dancat - helper script to create new Dancer-Catmandu applications

=head1 SYNOPSIS

dancat [options] -a <appname>

=head1 OPTIONS

    -h, --help            : output usage information
    -v, --version         : output the Dancer version number
    -a, --application     : the name of your application
    -p, --path            : the path where to create your application. Defaults to current directory.
    -s, --store           : the catmandu store to use. Options are [dbi|elasticsearch|hash|solr]
    -t, --template        : the template engine to use. Options are [tt|simple]
    -x, --no-check        : don't check for the latest version of Dancer

=head1 USAGE

    $ dancat -s ElasticSearch -t TemplateToolkit -a MyWeb::App
    $ cd MyWeb-App
    $ ./bin/app.pl

=cut
